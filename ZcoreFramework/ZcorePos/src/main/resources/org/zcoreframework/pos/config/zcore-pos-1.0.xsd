<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans"
            xmlns="http://www.zcoreframework.org/schema/pos"
            targetNamespace="http://www.zcoreframework.org/schema/pos" elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans.xsd"/>

    <xsd:element name="isoServer">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="services" minOccurs="0" maxOccurs="1" type="beans:listOrSetType"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="executor-annotation">
        <xsd:annotation>
            <xsd:documentation>
                Enables the detection of @Async and @Scheduled annotations on any Spring-managed
                object. If present, a proxy will be generated for executing the annotated methods
                asynchronously.

                See Javadoc for the org.springframework.scheduling.annotation.EnableAsync and
                org.springframework.scheduling.annotation.EnableScheduling annotations for information
                on code-based alternatives to this XML element.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="executor" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        Specifies the java.util.Executor instance to use when invoking asynchronous methods.
                        If not provided, an instance of org.springframework.core.task.SimpleAsyncTaskExecutor
                        will be used by default.
                        Note that as of Spring 3.1.2, individual @Async methods may qualify which executor to
                        use, meaning that the executor specified here acts as a default for all non-qualified
                        @Async methods.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="exception-handler" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        Specifies the org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler
                        instance to use when an exception is thrown during an asynchronous method execution
                        and cannot be accessed by the caller. If not provided, an instance of
                        org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler will be
                        used by default.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="scheduler" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        Specifies the org.springframework.scheduling.TaskScheduler or
                        java.util.ScheduledExecutorService instance to use when invoking scheduled
                        methods. If no reference is provided, a TaskScheduler backed by a single
                        thread scheduled executor will be used.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="mode" default="proxy">
                <xsd:annotation>
                    <xsd:documentation>
                        Should annotated beans be proxied using Spring's AOP framework,
                        or should they rather be weaved with an AspectJ async execution aspect?

                        AspectJ weaving requires spring-aspects.jar on the classpath,
                        as well as load-time weaving (or compile-time weaving) enabled.

                        Note: The weaving-based aspect requires the @Async annotation to be
                        defined on the concrete class. Annotations in interfaces will not work
                        in that case (they will rather only work with interface-based proxies)!
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string">
                        <xsd:enumeration value="proxy"/>
                        <xsd:enumeration value="aspectj"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="proxy-target-class" type="xsd:boolean" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        Are class-based (CGLIB) proxies to be created? By default, standard
                        Java interface-based proxies are created.

                        Note: Class-based proxies require the @Async annotation to be defined
                        on the concrete class. Annotations in interfaces will not work in
                        that case (they will rather only work with interface-based proxies)!
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="executor">
        <xsd:annotation>
            <xsd:documentation>
                Defines a ThreadPoolTaskExecutor instance with configurable pool size,
                queue-capacity, keep-alive, and rejection-policy values.

                See Javadoc for the org.springframework.scheduling.annotation.EnableAsync annotation
                for information on code-based alternatives to this XML element.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="id" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        The bean name for the generated ThreadPoolTaskExecutor instance.
                        This value will also be used as the thread name prefix which is why it is
                        required even when defining the executor as an inner bean: The executor
                        won't be directly accessible then but will nevertheless use the specified
                        id as the thread name prefix of the threads that it manages.
                        In the case of multiple task:executors, as of Spring 3.1.2 this value may be used to
                        qualify which executor should handle a given @Async method, e.g. @Async("executorId").
                        See the Javadoc for the #value attribute of Spring's @Async annotation for details.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="pool-size" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        The size of the executor's thread pool as either a single value or a range
                        (e.g. 5-10). If no bounded queue-capacity value is provided, then a max value
                        has no effect unless the range is specified as 0-n. In that case, the core pool
                        will have a size of n, but the 'allowCoreThreadTimeout' flag will be set to true.
                        If a queue-capacity is provided, then the lower bound of a range will map to the
                        core size and the upper bound will map to the max size. If this attribute is not
                        provided, the default core size will be 1, and the default max size will be
                        Integer.MAX_VALUE (i.e. unbounded).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="queue-capacity" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        Queue capacity for the ThreadPoolTaskExecutor. If not specified, the default will
                        be Integer.MAX_VALUE (i.e. unbounded).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="keep-alive" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        Keep-alive time in seconds. Inactive threads that have been created beyond the
                        core size will timeout after the specified number of seconds elapse. If the
                        executor has an unbounded queue capacity and a size range represented as 0-n,
                        then the core threads will also be configured to timeout when inactive.
                        Otherwise, core threads will not ever timeout.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="rejection-policy" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        The RejectedExecutionHandler type. When a bounded queue cannot accept any
                        additional tasks, this determines the behavior. While the default is ABORT,
                        consider using CALLER_RUNS to throttle inbound tasks. In other words, by forcing
                        the caller to run the task itself, it will not be able to provide another task
                        until after it completes the task at hand. In the meantime, one or more tasks
                        may be removed from the queue. Alternatively, if it is not critical to run every
                        task, consider using DISCARD to drop the current task or DISCARD_OLDEST to drop
                        the task at the head of the queue.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string">
                        <xsd:enumeration value="ABORT"/>
                        <xsd:enumeration value="CALLER_RUNS"/>
                        <xsd:enumeration value="DISCARD"/>
                        <xsd:enumeration value="DISCARD_OLDEST"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

</xsd:schema>